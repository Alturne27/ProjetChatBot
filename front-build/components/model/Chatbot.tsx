/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, type JSX } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
gsap.registerPlugin(ScrollTrigger);

type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh;
    Cube001_1: THREE.Mesh;
    Cube001_2: THREE.Mesh;
    Cube001_3: THREE.Mesh;
    Cube001_4: THREE.Mesh;
    Cube001_5: THREE.Mesh;
    Cube001_6: THREE.Mesh;
    Cube001_7: THREE.Mesh;
    Cube001_8: THREE.Mesh;
    Cube001_9: THREE.Mesh;
  };
  materials: {
    ["Blue 2"]: THREE.MeshStandardMaterial;
    ["Blue 3"]: THREE.MeshStandardMaterial;
    Black: THREE.MeshStandardMaterial;
    ["Blue 1"]: THREE.MeshStandardMaterial;
    ["Blue 4"]: THREE.MeshStandardMaterial;
    White: THREE.MeshStandardMaterial;
    ["Blue 5"]: THREE.MeshStandardMaterial;
    ["Red 1"]: THREE.MeshStandardMaterial;
    ["Red 2"]: THREE.MeshStandardMaterial;
    ["Red 3"]: THREE.MeshStandardMaterial;
  };
};

type ActionName = "CubeAction";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const floatAmplitude = 0.2;
const floatSpeed = 1.5;
const rotationSpeed = 0.3;

export function Chatbot(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const mesh = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "/model/chatbot.glb"
  ) as unknown as GLTFResult;

  useFrame(() => {
    if (group.current) {
      // animation de flottement
      group.current.position.y =
        floatAmplitude * Math.sin(Date.now() * floatSpeed * 0.001);
      group.current.rotation.y =
        floatAmplitude * Math.sin(Date.now() * rotationSpeed * 0.002);
    }
  });

  const { contextSafe } = useGSAP({ scope: mesh }); // we can pass in a config object as the 1st parameter to make scoping simple

  // âœ… wrapped in contextSafe() - animation will be cleaned up correctly
  // selector text is scoped properly to the container.
  const onClickGood = contextSafe(() => {
    if (mesh.current) {
      gsap.to(mesh.current.position, {
        y: "+=2",
        duration: 0.3,
        ease: "power2.inOut",
        yoyo: true,
        repeat: 1,
        onComplete: () => {
          if (mesh.current) {
            gsap.to(mesh.current.position, {
              y: 1.2,
              duration: 0.3,
              ease: "power2.inOut",
            });
          }
        },
      });
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group
          ref={mesh}
          name="Cube"
          position={[0.5, 1.2, 0]}
          scale={[0.5, 0.5, 3.9]}
          onClick={onClickGood}
        >
          <mesh
            name="Cube001"
            castShadow
            receiveShadow
            geometry={nodes.Cube001.geometry}
            material={materials["Blue 2"]}
          />
          <mesh
            name="Cube001_1"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_1.geometry}
            material={materials["Blue 3"]}
          />
          <mesh
            name="Cube001_2"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_2.geometry}
            material={materials.Black}
          />
          <mesh
            name="Cube001_3"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_3.geometry}
            material={materials["Blue 1"]}
          />
          <mesh
            name="Cube001_4"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_4.geometry}
            material={materials["Blue 4"]}
          />
          <mesh
            name="Cube001_5"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_5.geometry}
            material={materials.White}
          />
          <mesh
            name="Cube001_6"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_6.geometry}
            material={materials["Blue 5"]}
          />
          <mesh
            name="Cube001_7"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_7.geometry}
            material={materials["Red 1"]}
          />
          <mesh
            name="Cube001_8"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_8.geometry}
            material={materials["Red 2"]}
          />
          <mesh
            name="Cube001_9"
            castShadow
            receiveShadow
            geometry={nodes.Cube001_9.geometry}
            material={materials["Red 3"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/model/chatbot.glb");
